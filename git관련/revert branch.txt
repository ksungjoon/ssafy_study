
git reset / rever

파일이 업데이트 되면서 커밋하고 또 커밋하고.. 커밋을 여러번 했는데
이전의 커밋상태로 돌리고 싶을때 사용하는 것이 reset 과 revert 다.

결론 부터 말하면 reset / rever 둘다 이전 커밋을 다루지만
github에 다른사람 코드도 공유하고 협업을 하고 있다면 revert 를 사용하고
나혼자만 해당 브랜치를 사용하고 있다면 그때는 reset을 써도 상관없다.

reset부터 살펴보자. 다시 git을 초기화 하고 a.txt만 남기자.
커밋을 여러번 할 것이다.
$ git init

$ git add a.txt
$ git commit -m '1'
$ git log

$ git add b.txt
$ git commit -m '2'

$ git add c.txt
$ git commit -m '3'
$ git log --oneline

총 커밋을 3번 했다. 지금 커밋 메시지가 3인 상태인데 
커밋 메시지가 1인 상태로 돌아가 보도록 하겠다.

git reset --hard 5467af7

1번 커밋 할때로 돌아가 버렸다. 그리고 

$ git log --oneline

찍으면 커밋 했던 이력이 사라졌을 뿐더러 1번 커밋 할때는 
b.txt c.txt파일이 없었으니까 모두 삭제가 되었다.

그런데 커밋을 과거로 돌아가고 싶지만 파일은 삭제하기 싫다면?
hard 대신 옵션을 soft로 주면 b.txt  c.txt 파일은 삭제 되는것이 아니라 staging area로 돌려 놓아졌을 것이다.
다시 테스트 해보자

$ git add b.txt
$ git commit -m '2'

$ git add c.txt
$ git commit -m '3'
$ git log --oneline

$ git reset --soft 100e4c3
b 랑 c.txt 파일이 삭제 되지 않았다.

$ git status 

b 랑 c.txt 파일이 staging area 에 있다는 것을 확인할 수 있다.

따라서 사용법은 git reset --option [돌아갈커밋해시] 를 해주면 되는데
option에 hard를 하면 이전커밋으로 돌아가고 파일은 다 지우기
soft를 하면 이전 커밋 으로 돌아가고 파일은 staying 으로 돌리기
mixed를 하면  이전 커밋 으로 돌아가고 파일은 working area 로 돌아간다.

여기서 

$ git reflog

해보자 reflog를 하면 reset 하기 이전의 과거 커밋내역을 확인할 수 있다.
그리고 reflog 조회를 한 후에 원하는 커밋 히스토리로 복구도 가능하다.
b.txt 까지 커밋했던 때로 reset을 해 보겠다.

$ git reset 
$ git log

커밋이 1 그리고 2가 보일 것이고

$ git reflog 

최근 변동사항이 가장 윗줄에 기록되어 있을 것이다.
지금까지 reset을 봤다.
reset은 과거 커밋 시점으로 돌아갈 때 사용가능하다.
그리고 그때의 커밋 시점으로 돌아가는 대신 과거 커밋 내역은 지워져 버린다.
그래서 지워진 내역을 복구하고 싶으면 reflog를 사용해서 히스토리를 확인 후
복구를 해야 한다.

--------------------------------------

이제 revert를 보자.
커밋 상태를 이전 커밋 상태를 다룬다는 점에서는 reset과 비슷하다.
그런데 reset 은 원하는 커밋 시점으로 돌아간 후 이전 이전 커밋 내용을 삭제를 하지만
revert는 이전 커밋했던 내용을 취소를 하고 새 커밋을 생성하는 기능이다.

이게 무슨말인지 보자.
셋팅부터 하자 깃 초기화 하자.

[참고]
혹시 C:/Program Files/Git/usr/bin/vim 이런 에러가 뜬다면
시작전에 혹시 git 에디터를 vscode로 변경해 보겠다.
git config --global core.editor "code --wait"


새 폴더 만들고 a,b,c파일을 차례로 commit을 하자

$ git add a.txt
$ git commit -m '1'
$ git log
($ git log --oneline)

커밋 1,2,3이 되도록 셋팅이 되었다면

하나만 더 하자 c.txt 파일을 수정해 보자. 그리고 '4' 커밋하자

가장 직전 커밋을 취소하겠다. 
그러니까 취소 할 3번째 커밋의 해쉬번호를 revert에 넣어주자

$ git revert 3번해쉬값

컨트롤 + C

$ git log --oneline

revert한 이력이 있는지 확인하자. 그리고 c.txt 내용을 추가한 후에 커밋을 하자

그리고 revert로 돌려보자.


[정리]
git reset [해시번호] 라고 작성하면 해시번호에 해당하는 커밋으로 되돌린다는 뜻이지만
git revert [해시번호] 라고 작성하면 해시번호에 해당하는 커밋 취소하고
커밋이 취소 되었다는 내용의 새로운 커밋이 만들어 진다.

언제 reset이고 언제 revert를 사용할 것인가?
reset 명령은 커밋 히스토리가 수정 되기기 때문에 원격 저장소에 Push 된 커밋 이력이 있는 상태에서 reset 을 이용하면 로컬 저장소와 원격 저장소와 싱크가 맞지 않아 push 할 때
문제가 발생한다. push 이력이 있는 상태에서는 reset을 사용하지 않는다.

반면에 revert 명령은 커밋 히스토리를 수정하지 않고 커밋 취소했다는 새로운 커밋을 생성하기 때문에 
원격 레포지토리에 push 된 커밋도 수정이 용이하다. 과거의 이력도 온전히 보관되기 때문에 
공동작업 시 이전 커밋 버전으로 회귀하고 싶다면 reset을 사용하지 않고 revert를 사용하는 것이 더 유용하다.

===========================================================

먼저 git을 통해서 통합버전관리를 하면서 협업을 한다고 치자

ver1 ver2 를만들고 ver3부터는 프로젝트 사이즈가 커져서 일을 분업한다고 가정하자

ver2 폴더 안에는 a.txt 와 b.txt 파일이 존재 하는데 
ver2 폴더을 가지고 a학생은 a.txt파일을 수정 추가 할 것이고 b학생은 b.txt파일을 수정할 것이라고 가정하자.

이처럼 기본적으로 만들어 지는 main 브랜치에서 
a 학생 따로 b학생 따로 기존의 파일을 수정하거나 새로운 기능을 추가 할 때 새 브랜치를 만든다.

새 브랜치에서 원하는\ 작업을 다 끝냈다면 새 브랜치에 있던 파일을 원레  main으로 합칠 수 있는데
이렇게 main으로 합치는 것을 merge (병합)이라고 한다.

자 그러면 브랜치를 만들고 이동하는 것 부터 보자

바탕화면에 GitPractice 라고 폴더 만들고 work1 work2.txt 을 하나씩 1,2 이라는 메시지로 커밋을 만들자. 

$ git init


$ git init  하고 워크 파일 2개만 만들자 !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!

그리고  

work1 => test111111

work2 =>
            test
	asdfasdfasfasdfasfsadfasf
	141342342342


$ git add work1.txt
$ git commit -m '1'
$ git log 


$ git add work2.txt
$ git commit -m '2'
$ git log 


셋팅이 완료 되었다면 새 브랜치를 만들어 보자
브랜치를 확인하는 명령어를 써보자

$ git branch

지금 master 브랜치에서 작업하고 있다는 것을 *master 확인할 수 있다.
자 이제 studentA 라는 브랜치를 새로 만들 것이다.

$ git branch studentA 
$ git branch

현재 작업 브랜치는 Master이고 studentA브랜치가 만들어 진 것을 확인할 수있다.

studentB 도 브랜치도 만들어 보자

$ git branch studentB
$ git log --oneline

$ git log  

head 가 가르키는 포인터는 master 즉, 현재 작업하고 있는 브랜치는 master 라는 뜻이고 
지금 현재 저장소에 브랜치는 studentA라는 가지가 존재한다.


이 상태에서 새 커밋을 추가해 볼 것이다.

work3.txt 파일 만든 후 
$ git add .
$ git commit -m '워크3추가'
$ git log --oneline

확인해 보면 work3은 현재 작업중인 브랜치 master에만 적용이 되어 있다. 
그래서 이와같이 브랜치 별로 커밋을 따로 따로 관리할 수 있는데
그럼 브랜치 이동해서 커밋을 해보자.

$ git switch studentA
$ git log --oneline

(HEAD -> studentA, studentB)
현재 작업 브랜치는 Head가 가르키는 studentA 라는 뜻이고
studentA를 만들기전 (분기라고 표현) master에서 했던 커밋들은 work 1,2 는 
그대로 studentA에 적용되었고 
studentA 브랜치를 분기 한 후에 master에서 추가 된 커밋 work3는 
sttudentA에 영향을 끼치지 않았다는 것을 확인했다.

이렇게 브랜치 별로 전환하면서 브랜치 마다 서로 다른 커밋을 처리 할 수 있다.

현재 studetA의 브랜치에서 work1파일 내용을 수정해 보자

"studentA 가 work1 수정 후 커밋"

그다음 저장 후 커밋해보자.

$ git add work1.txt
$ git commit -m 'studentA수정1'
$ git log --oneline

(HEAD -> studentA) 를 보면 현재 studentA 브랜치로 스위치한 상태고
studentA의 최신 커밋은 studentA수정1 이라는 것을 확인할 수 있다.

$ git log --oneline --branches

--branches 옵션을 추가하면 브랜치 마다 최신 커밋을 한눈에 확인할 수도 있다.


$ git log --oneline --branches --graph

--graph 옵션을 추가하면 브랜치 연결 상태를 확인할 수도 있다.


$ git log master..studentA

이렇게 하면 master에는 없고 studentA에만 있는 커밋을 보여준다.

$ git log studentA..master

반대로 하면 studentA에는 없고 master에만 있는 커밋을 보여준다.

------

자 이렇게 작업을 마무리 했다면 하나로 합치는 브랜치 merge를 해볼 것이다.
먼저 studentA와 studentB내용을 master에 병합을 할 것이니까 master로 먼저 전환하자.

$ git switch master

그다음 master를 기준으로 studentA를 가져야 병합하자.

$ git merge studentA

$ git log --oneline 확인하자
$ git log --oneline --branches --graph 확인해보자

방금처럼 각각의 브랜치에서 서로 다른 문서를 생성 또는 수정을 했다면 병합이 간단하다.
하지만 서로다른 각각의 브랜치에서 같은 문서를 수정한다면 어떻게 병합할지 실습해 보자.

케이스는 2가지로 보자
1. 같은 문서를 수정하는데 수정하는 부분이 다를 때
2. 같은 문서를 수정하는데 수정하는 부분이 같을 때

먼저 마스터와 브랜치의 상태를 같게 만들자

$ git switch studentA
$ git rebase master 

$ git switch studentB
$ git rebase master 


1. 같은 문서를 수정하는데 수정하는 부분이 다른 경우를 보자

$ git switch studentA
1번쨰줄 글을 수정하자 
$ git add .
$ git commit -m'A가 work2의 1줄 수정'


학생B로 이동

$ git switch studentB
3번쨰줄 글을 수정하자 
$ git add .
$ git commit -m 'b가 work2의 3줄 수정'

마스터로 이동 후 각각 merge 하자

이렇게 같은 문서지만 수정하는 부분이 다르다면 문제가 될 것이 없다.
하지만 같은 문서지만 수정하는 부분이 같다면 그떄는 충돌이 일어난다.
테스트 해보자

studentA로 이동 후 work3파일을 수정해 보자

$ git switch studentA
파일수정 후
$ git add .
$ git commit -m 'a가 work3수정'


Master 로 이동 후 work3파일을 수정해 보자
$ git add .
$ git commit -m '마스터가 work3수정'

지금 A가 마스터가 같은 문장을 수정했는데 병합 해 보자

$ git merge studentA 

충돌이 일어난다.
그러면 이때 충돌이 생긴 문서는 자동으로 병합할 수 없다. 
그래서 사용자가 직접 해결 후 커밋을 해야한다. 
이떄는 직접 코드를 수정한 후에 add commit을 해줘야 한다.

$ git add .
$ git commit -m '충돌해결'


















